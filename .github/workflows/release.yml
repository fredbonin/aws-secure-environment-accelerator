name: Release
on:
  push:
    branches:
      - 'release/v*'
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Format Branch Name
        id: format
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          git fetch --tags
          echo ::set-output name=branch_name::$(echo "${GITHUB_REF}" | cut -d/ -f3-)
          echo ::set-output name=tag_name::$(echo "${GITHUB_REF}" | cut -d/ -f4-)
          echo ::set-output name=numeric_release::$(echo "${GITHUB_REF}" | cut -d/ -f4- | tr -d v)
          echo ::set-output name=numeric_release_short::$(echo "${GITHUB_REF}" | cut -d/ -f4- | tr -d v.-)
          echo ::set-output name=release_name::"Release $(echo "${GITHUB_REF}" | cut -d/ -f4-)"
      - name: Use Node.js
        uses: actions/setup-node@v1
        env:
          RUNNER_TEMP: /tmp/runner
        with:
          node-version: 14
      - name: Install pnpm
        run: |
          npm install -g pnpm@6.2.3
      - name: Generate Changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_DEFAULT_BRANCH: ${{ steps.format.outputs.branch_name }}
        run: |
          previous_tag=$(git describe --tags --abbrev=0)
          echo "Previous release was: ${previous_tag}"
          changes=$(git log ${previous_tag}..HEAD --pretty="tformat:* %s (%h)" --first-parent)
          echo ${changes}
          changes="${changes//'%'/'%25'}"    # Avoids whitespace removal.
          changes="${changes//$'\n'/'%0A'}"
          changes="${changes//$'\r'/'%0D'}"
          echo ::set-output name=changelog::${changes}
      - name: Bump package.json
        run: |
          npm install -g json
          git config user.name github-actions
          git config user.email github-actions@github.com
          json -I -f src/core/cdk/package.json -e 'this.version="${{ steps.format.outputs.numeric_release }}"'
          git add src/core/cdk/package.json
          json -I -f src/installer/cdk/package.json -e 'this.version="${{ steps.format.outputs.numeric_release }}"'
          git add src/installer/cdk/package.json
          git commit -am 'Updating package to ${{ steps.format.outputs.numeric_release }}'
      - name: Push Bumped Package Files
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.format.outputs.branch_name }}
      - name: Build Accelerator Installer
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_DEFAULT_BRANCH: ${{ steps.format.outputs.branch_name }}
          INSTALLER_STACK_DIR: ./src/installer/cdk
          INSTALLER_STACK_NAME: AcceleratorInstaller
          NUMERIC_RELEASE_SHORT: ${{ steps.format.outputs.numeric_release_short }}
          OUTPUT_DIR: templates
        run: |
          cd "${INSTALLER_STACK_DIR}"
          pnpm install --frozen-lockfile
          pnpx cdk synth --output "${OUTPUT_DIR}" "${INSTALLER_STACK_NAME}"

          echo ::set-output name=template_name::${INSTALLER_STACK_NAME}${NUMERIC_RELEASE_SHORT}.template.json
          echo ::set-output name=template_name_code_commit::${INSTALLER_STACK_NAME}${NUMERIC_RELEASE_SHORT}-CodeCommit.template.json
          echo ::set-output name=template_path::$(realpath "${OUTPUT_DIR}/${INSTALLER_STACK_NAME}.template.json")
          echo ::set-output name=template_path_code_commit::$(realpath "${OUTPUT_DIR}/${INSTALLER_STACK_NAME}-CodeCommit.template.json")
      - name: Build SEA-GUI project
        id: build-sea-gui
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_DIR: ./src/ui
          NUMERIC_RELEASE_SHORT: ${{ steps.format.outputs.numeric_release_short }}
          OUTPUT_DIR: build
        run: |
          cd "${BUILD_DIR}"
          pnpm build:ui
          zip -r  ui-build.zip "${OUTPUT_DIR}"

          echo ::set-output name=release-path::$(realpath "./ui-build.zip")
          echo ::set-output name=release-asset-name::AWS-SEA-GUI-mockup-DoNotUse-V${NUMERIC_RELEASE_SHORT}-alpha.zip
      - name: Build SEA-Config-Schema project
        id: build-sea-config-schema
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BUILD_DIR: ./src/lib/docs-gen
          NUMERIC_RELEASE_SHORT: ${{ steps.format.outputs.numeric_release_short }}
          OUTPUT_DIR: output-docs
        run: |
          cd "${BUILD_DIR}"
          pnpm build
          zip -r  sea-config-schema-build.zip "${OUTPUT_DIR}"

          echo ::set-output name=release-path::$(realpath "./sea-config-schema-build.zip")
          echo ::set-output name=release-asset-name::AWS-SEA-Config-Schema-V${NUMERIC_RELEASE_SHORT}-DRAFT.zip
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.format.outputs.tag_name }}
          release_name: ${{ steps.format.outputs.release_name }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: false
      - name: Upload Release Asset - AcceleratorInstaller
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.template_path }}
          asset_name: ${{ steps.build.outputs.template_name }}
          asset_content_type: application/json
      - name: Upload Release Asset - AcceleratorInstaller-CodeCommit
        id: upload-release-asset-code-commmit
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build.outputs.template_path_code_commit }}
          asset_name: ${{ steps.build.outputs.template_name_code_commit }}
          asset_content_type: application/json
      - name: Upload Release Asset - SEA-GUI
        id: upload-release-asset-sea-gui
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build-sea-gui.outputs.release-path }}
          asset_name: ${{ steps.build-sea-gui.outputs.release-asset-name }}
          asset_content_type: application/zip
      - name: Upload Release Asset - SEA-Config-Schema
        id: upload-release-asset-sea-config-schema
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.build-sea-config-schema.outputs.release-path }}
          asset_name: ${{ steps.build-sea-config-schema.outputs.release-asset-name }}
          asset_content_type: application/zip
      - name: Get Draft Release Url
        id: release_url
        run: |
          echo "Draft release available at: ${{ steps.create_release.outputs.html_url}}"
